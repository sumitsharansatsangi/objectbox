// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 6429871204888392208),
    name: 'Tag',
    lastPropertyId: const obx_int.IdUid(2, 4925435338592593907),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1200986681253511313),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4925435338592593907),
        name: 'name',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 4842328717887485604),
    name: 'Task',
    lastPropertyId: const obx_int.IdUid(5, 3059700665971025631),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5944135736156521356),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1227433055067242806),
        name: 'text',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5527499319751014240),
        name: 'dateCreated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3776159701274733138),
        name: 'dateFinished',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3059700665971025631),
        name: 'tagId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 2197502463804752187),
        relationTarget: 'Tag',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 4842328717887485604),
    lastIndexId: const obx_int.IdUid(1, 2197502463804752187),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Tag: obx_int.EntityDefinition<Tag>(
      model: _entities[0],
      toOneRelations: (Tag object) => [],
      toManyRelations: (Tag object) => {},
      getId: (Tag object) => object.id,
      setId: (Tag object, int id) {
        object.id = id;
      },
      objectToFB: (Tag object, obx.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = obx.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object =
            Tag(
                id: const obx.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
                name: const obx.StringReader(
                  asciiOptimization: true,
                ).vTableGet(buffer, rootOffset, 6, ''),
              )
              ..id = const obx.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
              ..name = const obx.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 6, '');

        return object;
      },
    ),
    Task: obx_int.EntityDefinition<Task>(
      model: _entities[1],
      toOneRelations: (Task object) => [object.tag],
      toManyRelations: (Task object) => {},
      getId: (Task object) => object.id,
      setId: (Task object, int id) {
        object.id = id;
      },
      objectToFB: (Task object, obx.Builder fbb) {
        final textOffset = fbb.writeString(object.text);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, textOffset);
        fbb.addInt64(2, object.dateCreated.millisecondsSinceEpoch);
        fbb.addInt64(3, object.dateFinished?.millisecondsSinceEpoch);
        fbb.addInt64(4, object.tag.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = obx.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dateFinishedValue = const obx.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final object =
            Task(
                id: const obx.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
                text: const obx.StringReader(
                  asciiOptimization: true,
                ).vTableGet(buffer, rootOffset, 6, ''),
                dateCreated: DateTime.fromMillisecondsSinceEpoch(
                  const obx.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
                ),
                dateFinished: dateFinishedValue == null
                    ? null
                    : DateTime.fromMillisecondsSinceEpoch(dateFinishedValue),
              )
              ..id = const obx.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
              ..text = const obx.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 6, '')
              ..dateCreated = DateTime.fromMillisecondsSinceEpoch(
                const obx.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              )
              ..dateFinished = dateFinishedValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dateFinishedValue);
        object.tag.targetId = const obx.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.tag.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Tag] entity fields to define ObjectBox queries.
class Tag_ {
  /// See [Tag.id].
  static final id = obx.QueryIntegerProperty<Tag>(_entities[0].properties[0]);

  /// See [Tag.name].
  static final name = obx.QueryStringProperty<Tag>(_entities[0].properties[1]);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// See [Task.id].
  static final id = obx.QueryIntegerProperty<Task>(_entities[1].properties[0]);

  /// See [Task.text].
  static final text = obx.QueryStringProperty<Task>(_entities[1].properties[1]);

  /// See [Task.dateCreated].
  static final dateCreated = obx.QueryDateProperty<Task>(
    _entities[1].properties[2],
  );

  /// See [Task.dateFinished].
  static final dateFinished = obx.QueryDateProperty<Task>(
    _entities[1].properties[3],
  );

  /// See [Task.tag].
  static final tag = obx.QueryRelationToOne<Task, Tag>(
    _entities[1].properties[4],
  );
}
